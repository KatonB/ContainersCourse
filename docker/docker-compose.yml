services:
  init_db:
    image: busybox #Image for init containers
    container_name: init_db_container
    command: [ "sh", "-c", "ping -c 3 8.8.8.8" ]
    networks:
      - shop_network
    restart: "no"

  db:
    image: postgres:15
    container_name: shop_db
    networks:
      - shop_network
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    depends_on:
      - init_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    build:
        context: ../
        dockerfile: docker/DockerFileGood
    container_name: shop_api
    networks:
      - shop_network
    restart: always
    ports:
      - 8000:8000
    command: uvicorn hw2.main:app --host 0.0.0.0 --port 8000
    volumes:
      - .:/app
    depends_on:
      - db
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/docs" ]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    container_name: shop_grafana
    networks:
      - shop_network
    ports:
      - 3000:3000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: shop_prometheus
    networks:
      - shop_network
    ports:
      - 9090:9090
    volumes:
      - ../settings/prometheus/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    restart: always

volumes:
  postgres_data:

networks:
  shop_network: